/* Generated By:JavaCC: Do not edit this line. ModelGenerator.java */
package uti.parser;

import java.io.*;
import uti.codeModel.*;
import java.util.*;

public class ModelGenerator implements ModelGeneratorConstants {
   static public UtiPackage MainPackage=null;
   static void readSingleFile(File f, UtiPackage m)
   {
       try {
       ModelGenerator mg = new ModelGenerator(new FileReader(f.getName()));
       mg.MainPackage = m;
       mg.program();
       } catch(Exception e) {

       }
   }
   static UtiPackage getPackage(LinkName n)
   {
      UtiPackage current=MainPackage;
      for (int i = 0; i < n.getCount(); i++) {
         String b = n.getValue(i);
         UtiPackage ne = current.getPackageByName(b);
         if (ne== null) ne = current.addPackage(b);
         current = ne;
      }
      return current;
   }

  static final public void program() throws ParseException {
   LinkName n=null;
   UtiPackage currentpackage=MainPackage;
   UtiClass c=null;
   UtiInterface i=null;
    if (jj_2_1(2)) {
      jj_consume_token(PACKAGE_TOK);
      n = name();
         currentpackage = getPackage(n);
    } else {
      ;
    }
    label_1:
    while (true) {
      if (jj_2_2(2)) {
        c = StdClass();
                    currentpackage.addChild(c);
      } else if (jj_2_3(2)) {
        i = StdInterface();
                            currentpackage.addChild(i);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_4(2)) {
        ;
      } else {
        break label_1;
      }
    }
  }

  static final public LinkName name() throws ParseException {
   LinkName n=new LinkName();
   Token bez;
    bez = jj_consume_token(IDENT);
                n.addValue(bez.toString(), bez);
    label_2:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(DOT);
      bez = jj_consume_token(IDENT);
                       n.addValue(bez.toString(), bez);
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiClass StdClass() throws ParseException {
   UtiClass cl=null;
   boolean abst= false;
   boolean publ = false;
   boolean fin=false;
    if (jj_2_6(2)) {
      jj_consume_token(PUBLIC_TOK);
             publ=true;
    } else {
      ;
    }
    if (jj_2_9(2)) {
      if (jj_2_7(2)) {
        jj_consume_token(ABSTRACT_TOK);
                 abst = true;
      } else if (jj_2_8(2)) {
        jj_consume_token(FINAL_TOK);
                fin = true;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    cl = Klassendeklaration();
   cl.setPublic(publ);
   cl.setAbstract(abst);
   cl.setFinal(fin);
   {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiInterface StdInterface() throws ParseException {
    jj_consume_token(INTERFACE_TOK);
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public int Sichtbarkeitsmod() throws ParseException {
   int vis = -1;
    if (jj_2_13(2)) {
      if (jj_2_10(2)) {
        jj_consume_token(PUBLIC_TOK);
                   vis = 0;
      } else if (jj_2_11(2)) {
        jj_consume_token(PROTECTED_TOK);
                        vis = 1;
      } else if (jj_2_12(2)) {
        jj_consume_token(PRIVATE_TOK);
                      vis = 2;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
      {if (true) return vis;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiClass Klassendeklaration() throws ParseException {
   UtiClass cl=new UtiClass(null);
   Token cn;
   LinkName ln;
   BaseName bn;
   Vector blist;
   int vis=-1;
    jj_consume_token(CLASS_TOK);
    cn = jj_consume_token(IDENT);
                       cl.setName(cn.toString());
    if (jj_2_14(2)) {
      jj_consume_token(EXTENDS_TOK);
      ln = name();
         LinkMemory.add(cl.intern_extends_link(), cl, ln, UtiClass.class);
    } else {
      ;
    }
    if (jj_2_16(2)) {
      jj_consume_token(IMPLEMENTS_TOK);
      ln = name();
         LinkMemory.add(cl.intern_impl_link(), cl, ln, UtiInterface.class);
      label_3:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        ln = name();
           LinkMemory.add(cl.intern_impl_link(), cl, ln, UtiInterface.class);
      }
    } else {
      ;
    }
    jj_consume_token(LGKLAMMER);
    label_4:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_22(2)) {
        vis = Sichtbarkeitsmod();
        if (jj_2_18(2)) {
          bn = Methode();
            cl.addChild(bn);
        } else if (jj_2_19(2)) {
          bn = Constructor();
            cl.addChild(bn);
        } else if (jj_2_20(2)) {
          blist = Deklaration();
            for (int i = 0; i < blist.size(); i++) {
               cl.addChild((BaseName)blist.elementAt(i));
            }
        } else if (jj_2_21(2)) {
          jj_consume_token(ABSTRACT_TOK);
          bn = Methodenrumpf();
            cl.addChild(bn);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_23(2)) {
        jj_consume_token(STATIC_TOK);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RGKLAMMER);
    {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector Deklaration() throws ParseException {
   LinkName typ;
   int arraycount=0;
   UtiVariable var;
   Vector l = new Vector();
    typ = name();
    label_5:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(REKLAMMER);
      jj_consume_token(LEKLAMMER);
                       arraycount++;
    }
    var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), var, typ, UtiType.class);
      var.addArray(arraycount);
      l.addElement(var);
    label_6:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), var, typ, UtiType.class);
      var.addArray(arraycount);
      l.addElement(var);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiVariable Variablendeklaration() throws ParseException {
   UtiVariable var=new UtiVariable(null);
   Token n;
    n = jj_consume_token(IDENT);
              var.setName(n.toString());
   {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector FormaleParameter() throws ParseException {
   LinkName typ;
   int arraycount=0;
   UtiVariable var;
   Vector l = new Vector();
    jj_consume_token(LKLAMMER);
    if (jj_2_27(2)) {
      typ = name();
      label_7:
      while (true) {
        if (jj_2_26(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(REKLAMMER);
        jj_consume_token(LEKLAMMER);
                        arraycount++;
      }
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), var, typ, UtiType.class);
      var.addArray(arraycount);
      l.addElement(var);
      arraycount = 0;
    } else {
      ;
    }
    label_8:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      typ = name();
      label_9:
      while (true) {
        if (jj_2_29(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(REKLAMMER);
        jj_consume_token(LEKLAMMER);
                       arraycount++;
      }
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), var, typ, UtiType.class);
      var.addArray(arraycount);
      l.addElement(var);
      arraycount = 0;
    }
    jj_consume_token(RKLAMMER);
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod MethodKopf() throws ParseException {
   UtiMethod m = new UtiMethod(null);
   Vector v = new Vector();
   Token n;
   LinkName link;
    n = jj_consume_token(IDENT);
                m.setName(n.toString());
    v = FormaleParameter();
      for (int i = 0; i < v.size(); i++) {
         m.addChild((UtiVariable)v.elementAt(i));
      };
    if (jj_2_31(2)) {
      jj_consume_token(THROWS_TOK);
      link = name();
         LinkMemory.add(m.intern_throw(), m, link, UtiClass.class);
      label_10:
      while (true) {
        if (jj_2_30(2)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(COMMA);
        link = name();
         LinkMemory.add(m.intern_throw(), m, link, UtiClass.class);
      }
    } else {
      ;
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Constructor() throws ParseException {
   UtiMethod m = null;
   UtiBlock b=null;
    m = MethodKopf();
    b = Block();
    m.setBlock(b); {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Methode() throws ParseException {
   UtiMethod m = null;
   UtiBlock b=null;
    m = Methodenrumpf();
    b = Block();
    m.setBlock(b); {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Methodenrumpf() throws ParseException {
   UtiMethod m = null;
   LinkName typ;
    typ = name();
    m = MethodKopf();
   LinkMemory.add(m.intern_result(), m, typ, UtiType.class);
   {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiBlock Block() throws ParseException {
   UtiBlock b=new UtiBlock(null);
   BaseCommand com;
   Vector v;
    if (jj_2_37(2)) {
      jj_consume_token(LGKLAMMER);
      label_11:
      while (true) {
        if (jj_2_32(2)) {
          ;
        } else {
          break label_11;
        }
        if (jj_2_33(2)) {
          com = Basisanweisung();
          jj_consume_token(SEMICOLON);
         b.addCommand(com);
        } else if (jj_2_34(2)) {
          v = Deklaration();
          jj_consume_token(SEMICOLON);
         for (int i = 0; i < v.size(); i++)  {
            b.addCommand((UtiVariable)v.elementAt(i));
         }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RGKLAMMER);
    } else if (jj_2_38(2)) {
      if (jj_2_35(2)) {
        com = Basisanweisung();
        jj_consume_token(SEMICOLON);
         b.addCommand(com);
      } else if (jj_2_36(2)) {
        v = Deklaration();
        jj_consume_token(SEMICOLON);
         for (int i = 0; i < v.size(); i++)  {
            b.addCommand((UtiVariable)v.elementAt(i));
         }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return b;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public BaseCommand Basisanweisung() throws ParseException {
   BaseCommand com=null;
    if (jj_2_39(2)) {
      com = If();
    } else if (jj_2_40(2)) {
      com = For();
    } else if (jj_2_41(2)) {
      com = While();
    } else if (jj_2_42(2)) {
      com = DoWhile();
    } else {
      com = Zuweisung();
   {if (true) return com;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public BaseCommand Zuweisung() throws ParseException {
   UtiZuweisung z;
   UtiAusdruck a;
   UtiDesignator d;
    d = Designator();
    if (jj_2_43(2)) {
      jj_consume_token(43);
      a = Ausdruck();
   z = new UtiZuweisung(null);
   z.setExpression(a);
   z.setTarget(d);
   {if (true) return z;}
    } else {
      ;
    }
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiIf If() throws ParseException {
   UtiIf f = new UtiIf(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(IF_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
                             f.setExpression(d);
    b = Block();
              f.setThen_Block(b);
    if (jj_2_44(2)) {
      jj_consume_token(ELSE_TOK);
      b = Block();
                 f.setElse_Block(b);
    } else {
      ;
    }
   {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiFor For() throws ParseException {
   UtiFor f = new UtiFor(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(FOR_TOK);
    jj_consume_token(LKLAMMER);
    b = Block();
                        f.setInit(b);
    jj_consume_token(SEMICOLON);
    d = Ausdruck();
                     f.setBedingung(d);
    jj_consume_token(SEMICOLON);
    b = Block();
                  f.setStep(b);
    jj_consume_token(RKLAMMER);
    b = Block();
              f.setBlock(b);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiWhile While() throws ParseException {
   UtiWhile w = new UtiWhile(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(WHILE_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
    b = Block();
      w.setExpression(d);
      w.setBlock(b);
      {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiWhile DoWhile() throws ParseException {
   UtiWhile w = new UtiWhile(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(DO_TOK);
    b = Block();
    jj_consume_token(WHILE_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
      w.setExpression(d);
      w.setBlock(b);
      w.setDoWhile(true);
      {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiDesignator Designator() throws ParseException {
   UtiDesignator d = new UtiDesignator(null);
    {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck() throws ParseException {
   UtiAusdruck a= new UtiAusdruck(null);
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3_36() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_35() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(PACKAGE_TOK)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_scan_token(WHILE_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_34() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_26() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_scan_token(IMPLEMENTS_TOK)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_28() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    return false;
  }

  static final private boolean jj_3_33() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_scan_token(EXTENDS_TOK)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_scan_token(CLASS_TOK)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  static final private boolean jj_3_37() {
    if (jj_scan_token(LGKLAMMER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RGKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(FOR_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_27() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_scan_token(PRIVATE_TOK)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(PROTECTED_TOK)) return true;
    return false;
  }

  static final private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(PUBLIC_TOK)) return true;
    return false;
  }

  static final private boolean jj_3_44() {
    if (jj_scan_token(ELSE_TOK)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_3R_12()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_scan_token(IF_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_14() {
    if (jj_scan_token(INTERFACE_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_scan_token(FINAL_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3_43() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_scan_token(ABSTRACT_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_17() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(PUBLIC_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3_42() {
    if (jj_3R_25()) return true;
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    return false;
  }

  static final private boolean jj_3_41() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static final private boolean jj_3_40() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_scan_token(STATIC_TOK)) return true;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_scan_token(ABSTRACT_TOK)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_39() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_12() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_31() {
    if (jj_scan_token(THROWS_TOK)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_3R_16()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_3R_15()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_scan_token(DO_TOK)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ModelGeneratorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[44];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public ModelGenerator(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ModelGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ModelGenerator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ModelGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ModelGenerator(ModelGeneratorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ModelGeneratorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[44];
    for (int i = 0; i < 44; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
