/* Generated By:JavaCC: Do not edit this line. ModelGenerator.java */
package uti.parser;

import java.io.*;
import uti.codeModel.*;
import uti.java.*;
import java.util.*;

class TypeInfo
{
   LinkName name;
   int arraycount=0;
}

public class ModelGenerator implements ModelGeneratorConstants {
   static public UtiPackage MainPackage=null;
   static ModelGenerator mg=null;
   public static void readSingleFile(File f, UtiPackage m)
   {
       try {
       BufferedReader in =new BufferedReader(new FileReader(f.getAbsoluteFile()));
       System.out.println("Datei "+f.getAbsoluteFile()+" geladen");
       if (mg == null) {
          mg = new ModelGenerator(in);
       } else {
          mg.ReInit(in);
       }
       System.out.println("ModelGenerator gestartet");
       mg.MainPackage = m;
       mg.program();
       System.out.println("Programm geparsed");
       } catch(Exception e) {
       e.printStackTrace();
       }
   }
   static UtiPackage getPackage(LinkName n)
   {
      UtiPackage current=MainPackage;
      for (int i = 0; i < n.getCount(); i++) {
         String b = n.getValue(i);
         UtiPackage ne = current.getPackageByName(b);
         if (ne== null) ne = current.addPackage(b);
         current = ne;
      }
      return current;
   }

  static final public void program() throws ParseException {
   LinkName n=null;
   UtiPackage currentpackage=MainPackage;
   UtiClass c=null;
   UtiInterface i=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE_TOK:
      jj_consume_token(PACKAGE_TOK);
      n = name();
      jj_consume_token(SEMICOLON);
         currentpackage = getPackage(n);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS_TOK:
      case PUBLIC_TOK:
      case FINAL_TOK:
      case ABSTRACT_TOK:
        c = StdClass();
                    currentpackage.addChild(c);
        break;
      case INTERFACE_TOK:
        i = StdInterface();
                            currentpackage.addChild(i);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS_TOK:
      case INTERFACE_TOK:
      case PUBLIC_TOK:
      case FINAL_TOK:
      case ABSTRACT_TOK:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
  }

  static final public LinkName name() throws ParseException {
   LinkName n=new LinkName();
   Token bez;
    bez = jj_consume_token(IDENT);
                 n.addValue(bez.toString(), bez);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      bez = jj_consume_token(IDENT);
                       n.addValue(bez.toString(), bez);
    }
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public LinkName singlename() throws ParseException {
   LinkName n=new LinkName();
   Token bez;
    bez = jj_consume_token(IDENT);
                n.addValue(bez.toString(), bez);
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiClass StdClass() throws ParseException {
   UtiClass cl=null;
   boolean abst= false;
   boolean publ = false;
   boolean fin=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC_TOK:
      jj_consume_token(PUBLIC_TOK);
             publ=true;
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL_TOK:
    case ABSTRACT_TOK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT_TOK:
        jj_consume_token(ABSTRACT_TOK);
                 abst = true;
        break;
      case FINAL_TOK:
        jj_consume_token(FINAL_TOK);
                fin = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    cl = Klassendeklaration();
   cl.setPublic(publ);
   cl.setAbstract(abst);
   cl.setFinal(fin);
   {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiInterface StdInterface() throws ParseException {
    jj_consume_token(INTERFACE_TOK);
                {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public int Sichtbarkeitsmod() throws ParseException {
   int vis = -1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC_TOK:
    case PROTECTED_TOK:
    case PRIVATE_TOK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC_TOK:
        jj_consume_token(PUBLIC_TOK);
                   vis = 0;
        break;
      case PROTECTED_TOK:
        jj_consume_token(PROTECTED_TOK);
                        vis = 1;
        break;
      case PRIVATE_TOK:
        jj_consume_token(PRIVATE_TOK);
                      vis = 2;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
      {if (true) return vis;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiClass Klassendeklaration() throws ParseException {
   UtiClass cl=new UtiClass(null);
   Token cn;
   LinkName ln;
   BaseName bn;
   Vector blist;
   int vis=-1;
    jj_consume_token(CLASS_TOK);
    cn = jj_consume_token(IDENT);
                       cl.setName(cn.toString());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS_TOK:
      jj_consume_token(EXTENDS_TOK);
      ln = name();
         LinkMemory.add(cl.intern_extends_link(), cl, ln, UtiClass.class);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS_TOK:
      jj_consume_token(IMPLEMENTS_TOK);
      ln = name();
         LinkMemory.add(cl.intern_impl_link(), cl, ln, UtiInterface.class);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        ln = name();
           LinkMemory.add(cl.intern_impl_link(), cl, ln, UtiInterface.class);
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(LGKLAMMER);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC_TOK:
      case PROTECTED_TOK:
      case PRIVATE_TOK:
      case ABSTRACT_TOK:
      case STATIC_TOK:
      case EXTERN_TOK:
      case IDENT:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC_TOK:
      case PROTECTED_TOK:
      case PRIVATE_TOK:
      case ABSTRACT_TOK:
      case IDENT:
        vis = Sichtbarkeitsmod();
        if (jj_2_1(2147483647)) {
          bn = Methode();
            cl.addChild(bn);
        } else if (jj_2_2(2147483647)) {
          bn = Constructor();
            cl.addChild(bn);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            blist = Deklaration();
            jj_consume_token(SEMICOLON);
            for (int i = 0; i < blist.size(); i++) {
               cl.addChild((BaseName)blist.elementAt(i));
            }
            break;
          case ABSTRACT_TOK:
            jj_consume_token(ABSTRACT_TOK);
            bn = Methodenrumpf();
            cl.addChild(bn);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case STATIC_TOK:
        jj_consume_token(STATIC_TOK);
        break;
      case EXTERN_TOK:
        bn = ExternCode();
                           cl.addChild(bn);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RGKLAMMER);
    {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public void MethodeLookahead() throws ParseException {
    TypeDeklaration();
    jj_consume_token(IDENT);
    jj_consume_token(LKLAMMER);
  }

  static final public Vector Deklaration() throws ParseException {
   LinkName typ;
   int arraycount=0;
   UtiVariable var;
   Vector l = new Vector();
    typ = name();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REKLAMMER:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_5;
      }
      jj_consume_token(REKLAMMER);
      jj_consume_token(LEKLAMMER);
                        arraycount++;
    }
    var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), arraycount, var, typ, UtiType.class);
      l.addElement(var);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), arraycount, var, typ, UtiType.class);
      l.addElement(var);
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiVariable SingleDeklaration() throws ParseException {
   LinkName typ;
   int arraycount=0;
   UtiVariable var;
    typ = name();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REKLAMMER:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(REKLAMMER);
      jj_consume_token(LEKLAMMER);
                       arraycount++;
    }
    var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), arraycount, var, typ, UtiType.class);
    {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeInfo TypeDeklaration() throws ParseException {
   TypeInfo d= new TypeInfo();
    d.name = name();
    label_8:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(REKLAMMER);
      jj_consume_token(LEKLAMMER);
                                       d.arraycount++;
    }
       {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiVariable Variablendeklaration() throws ParseException {
   UtiVariable var=new UtiVariable(null);
   Token n;
    n = jj_consume_token(IDENT);
              var.setName(n.toString());
   {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector FormaleParameter() throws ParseException {
   UtiVariable var;
   Vector l = new Vector();
   TypeInfo t;
    jj_consume_token(LKLAMMER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      t = TypeDeklaration();
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), t.arraycount, var, t.name, UtiType.class);
      l.addElement(var);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      t = TypeDeklaration();
      var = Variablendeklaration();
      LinkMemory.add(var.intern_type(), t.arraycount, var, t.name, UtiType.class);
      l.addElement(var);
    }
    jj_consume_token(RKLAMMER);
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod MethodKopf() throws ParseException {
   UtiMethod m = new UtiMethod(null);
   Vector v = new Vector();
   Token n;
   LinkName link;
    n = jj_consume_token(IDENT);
                m.setName(n.toString());
    v = FormaleParameter();
      for (int i = 0; i < v.size(); i++) {
         m.addChild((UtiVariable)v.elementAt(i));
      };
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS_TOK:
      jj_consume_token(THROWS_TOK);
      link = name();
         LinkMemory.add(m.intern_throw(), m, link, UtiClass.class);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        link = name();
         LinkMemory.add(m.intern_throw(), m, link, UtiClass.class);
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Constructor() throws ParseException {
   UtiMethod m = null;
   UtiBlock b=null;
    m = MethodKopf();
    b = Block();
    m.setConstructor(true); m.setBlock(b); {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Methode() throws ParseException {
   UtiMethod m = null;
   UtiBlock b=null;
    m = Methodenrumpf();
    b = Block();
    m.setBlock(b); {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiMethod Methodenrumpf() throws ParseException {
   UtiMethod m = null;
   TypeInfo t;
    t = TypeDeklaration();
    m = MethodKopf();
   //   LinkMemory.add(m.intern_result(), m, typ, UtiType.class);
   LinkMemory.add(m.intern_result(), t.arraycount, m, t.name, UtiType.class);
   {if (true) return m;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiBlock Block() throws ParseException {
   UtiBlock b=new UtiBlock(null);
   BaseCommand com;
   Vector v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LGKLAMMER:
      jj_consume_token(LGKLAMMER);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_VALUE:
        case FLOAT_VALUE:
        case CHAR_VALUE:
        case STRING_VALUE:
        case IF_TOK:
        case DO_TOK:
        case WHILE_TOK:
        case FOR_TOK:
        case TRUE_TOK:
        case FALSE_TOK:
        case NULL_TOK:
        case EXTERN_TOK:
        case RETURN_TOK:
        case BREAK_TOK:
        case CONTINUE_TOK:
        case NEW_TOK:
        case IDENT:
        case LKLAMMER:
        case REKLAMMER:
        case SEMICOLON:
        case 80:
        case 81:
        case 85:
        case 86:
        case 87:
        case 88:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        if (jj_2_4(2)) {
          com = Basisanweisung();
         b.addCommand(com);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            v = Deklaration();
            jj_consume_token(SEMICOLON);
         for (int i = 0; i < v.size(); i++)  {
            b.addCommand((UtiVariable)v.elementAt(i));
         }
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(RGKLAMMER);
      break;
    case INTEGER_VALUE:
    case FLOAT_VALUE:
    case CHAR_VALUE:
    case STRING_VALUE:
    case IF_TOK:
    case DO_TOK:
    case WHILE_TOK:
    case FOR_TOK:
    case TRUE_TOK:
    case FALSE_TOK:
    case NULL_TOK:
    case EXTERN_TOK:
    case RETURN_TOK:
    case BREAK_TOK:
    case CONTINUE_TOK:
    case NEW_TOK:
    case IDENT:
    case LKLAMMER:
    case REKLAMMER:
    case SEMICOLON:
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      if (jj_2_5(2)) {
        com = Basisanweisung();
         b.addCommand(com);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          v = Deklaration();
          jj_consume_token(SEMICOLON);
         for (int i = 0; i < v.size(); i++)  {
            b.addCommand((UtiVariable)v.elementAt(i));
         }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public BaseCommand Basisanweisung() throws ParseException {
   BaseCommand com=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF_TOK:
      com = If();
      break;
    case FOR_TOK:
      com = For();
      break;
    case WHILE_TOK:
      com = While();
      break;
    case DO_TOK:
      com = DoWhile();
      break;
    case EXTERN_TOK:
      com = ExternCode();
      break;
    case RETURN_TOK:
      com = Return();
      break;
    case BREAK_TOK:
      com = Break();
      break;
    case CONTINUE_TOK:
      com = Continue();
      break;
    case INTEGER_VALUE:
    case FLOAT_VALUE:
    case CHAR_VALUE:
    case STRING_VALUE:
    case TRUE_TOK:
    case FALSE_TOK:
    case NULL_TOK:
    case NEW_TOK:
    case IDENT:
    case LKLAMMER:
    case REKLAMMER:
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      com = Ausdruck();
      jj_consume_token(SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return com;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiExtern ExternCode() throws ParseException {
   UtiExtern result = null;
   Token t1, t2;
    jj_consume_token(EXTERN_TOK);
    jj_consume_token(LKLAMMER);
    t1 = jj_consume_token(STRING_VALUE);
    jj_consume_token(RKLAMMER);
    t2 = jj_consume_token(CODE_VALUE);
   result = new UtiExtern();
   result.setType(t1.toString().substring(1, t1.toString().length()-1));
   result.setCode(t2.toString().substring(1, t2.toString().length()-1));
   {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*BaseCommand Zuweisung():
{
   UtiZuweisung z;
   UtiAusdruck a;
   UtiDesignator d;
}
{
   d = Designator() 
   (" = "
   a = Ausdruck()
   {
   z = new UtiZuweisung(null);
   z.setExpression(a);
   z.setTarget(d);
   return z;
   }
   )?
   {return d;}
}*/
  static final public UtiSpecialCommand Break() throws ParseException {
   UtiSpecialCommand f = new UtiSpecialCommand(null);
   UtiAusdruck d;
    jj_consume_token(BREAK_TOK);
    jj_consume_token(SEMICOLON);
   f.setType(UtiSpecialCommand.BREAK);
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiSpecialCommand Continue() throws ParseException {
   UtiSpecialCommand f = new UtiSpecialCommand(null);
   UtiAusdruck d;
    jj_consume_token(CONTINUE_TOK);
    jj_consume_token(SEMICOLON);
   f.setType(UtiSpecialCommand.CONTINUE);
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiSpecialCommand Return() throws ParseException {
   UtiSpecialCommand f = new UtiSpecialCommand(null);
   UtiAusdruck d;
    jj_consume_token(RETURN_TOK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_VALUE:
    case FLOAT_VALUE:
    case CHAR_VALUE:
    case STRING_VALUE:
    case TRUE_TOK:
    case FALSE_TOK:
    case NULL_TOK:
    case NEW_TOK:
    case IDENT:
    case LKLAMMER:
    case REKLAMMER:
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      d = Ausdruck();
                          f.setAusdruck(d);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
   f.setType(UtiSpecialCommand.RETURN);
  {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiIf If() throws ParseException {
   UtiIf f = new UtiIf(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(IF_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
                             f.setExpression(d);
    b = Block();
              f.setThen_Block(b);
    if (jj_2_6(2147483647)) {
      jj_consume_token(ELSE_TOK);
      b = Block();
                 f.setElse_Block(b);
    } else {
      ;
    }
   {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiFor For() throws ParseException {
   UtiFor f = new UtiFor(null);
   UtiAusdruck d;
   UtiBlock b;
   UtiVariable v;
    jj_consume_token(FOR_TOK);
    jj_consume_token(LKLAMMER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_VALUE:
    case FLOAT_VALUE:
    case CHAR_VALUE:
    case STRING_VALUE:
    case TRUE_TOK:
    case FALSE_TOK:
    case NULL_TOK:
    case NEW_TOK:
    case IDENT:
    case LKLAMMER:
    case REKLAMMER:
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      if (jj_2_7(2)) {
        d = Ausdruck();
                  f.addInit(d);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          v = SingleDeklaration();
                            f.addInit(v);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      if (jj_2_8(2)) {
        d = Ausdruck();
                  f.addInit(d);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          v = SingleDeklaration();
                                f.addInit(v);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(SEMICOLON);
    d = Ausdruck();
                     f.setBedingung(d);
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_VALUE:
    case FLOAT_VALUE:
    case CHAR_VALUE:
    case STRING_VALUE:
    case TRUE_TOK:
    case FALSE_TOK:
    case NULL_TOK:
    case NEW_TOK:
    case IDENT:
    case LKLAMMER:
    case REKLAMMER:
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      d = Ausdruck();
                  f.addUpdate(d);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      d = Ausdruck();
                      f.addUpdate(d);
    }
    jj_consume_token(RKLAMMER);
    b = Block();
              f.setBlock(b);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiWhile While() throws ParseException {
   UtiWhile w = new UtiWhile(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(WHILE_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
    b = Block();
      w.setExpression(d);
      w.setBlock(b);
      {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiWhile DoWhile() throws ParseException {
   UtiWhile w = new UtiWhile(null);
   UtiAusdruck d;
   UtiBlock b;
    jj_consume_token(DO_TOK);
    b = Block();
    jj_consume_token(WHILE_TOK);
    jj_consume_token(LKLAMMER);
    d = Ausdruck();
    jj_consume_token(RKLAMMER);
      w.setExpression(d);
      w.setBlock(b);
      w.setDoWhile(true);
      {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

/*UtiDesignator Designator():
{
   UtiDesignator d = new UtiDesignator(null);
   Vector elements=new Vector();
   LinkName n;
   UtiAusdruck a;
   Vector arguments;
}
{
  ( n=name() {elements.addElement(n);}
      ( 
      ("[" a= Ausdruck() "]" {elements.addElement(a);})+
      | "(" arguments=Arguments() ")" {elements.addElement(arguments);}
      )?
   (
      "."
      n=name() {elements.addElement(n);}
      ( 
      ("[" a= Ausdruck() "]" {elements.addElement(a);})+
      | "(" arguments=Arguments() ")" {elements.addElement(arguments);}
      )?
   
   )*
   )

   {
   LinkMemory.addDesignator(d, elements);
   return d;
   }
}

UtiDesignator ContinueDesignator():
{
   UtiDesignator d = new UtiDesignator(null);
   Vector elements=new Vector();
   LinkName n;
   UtiAusdruck a;
   Vector arguments;
}
{
  ( "." n=name() {elements.addElement(n);}
      ( 
       "(" arguments=Arguments() ")" {elements.addElement(arguments);}
      )?
      |( "[" a= Ausdruck() "]" {elements.addElement(a);})+
       
   (
      "."
      n=name() {elements.addElement(n);}
      ( 
      ("[" a= Ausdruck() "]" {elements.addElement(a);})+
      | "(" arguments=Arguments() ")" {elements.addElement(arguments);}
      )?
   
   )*
   )

   {
   LinkMemory.addContinueDesignator(d, elements);
   return d;
   }
}
*/
  static final public Vector Arguments() throws ParseException {
   Vector a= new Vector();
   UtiAusdruck aus;
    aus = Ausdruck();
                     a.addElement(aus);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      aus = Ausdruck();
                         a.addElement(aus);
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck() throws ParseException {
   UtiAusdruck a;
    a = Ausdruck1();
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck1() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
                       value=UtiAusdruck.BI_SET;
        break;
      case 53:
        jj_consume_token(53);
                        value=UtiAusdruck.BI_SETADD;
        break;
      case 54:
        jj_consume_token(54);
                        value=UtiAusdruck.BI_SETSUB;
        break;
      case 55:
        jj_consume_token(55);
                        value=UtiAusdruck.BI_SETMUL;
        break;
      case 56:
        jj_consume_token(56);
                        value=UtiAusdruck.BI_SETDIV;
        break;
      case 57:
        jj_consume_token(57);
                        value=UtiAusdruck.BI_SETMODULO;
        break;
      case 58:
        jj_consume_token(58);
                         value=UtiAusdruck.BI_SETRSHIFT;
        break;
      case 59:
        jj_consume_token(59);
                          value=UtiAusdruck.BI_SETRROUNDSHIFT;
        break;
      case 60:
        jj_consume_token(60);
                         value=UtiAusdruck.BI_SETLSHIFT;
        break;
      case 61:
        jj_consume_token(61);
                        value=UtiAusdruck.BI_SETAND;
        break;
      case 62:
        jj_consume_token(62);
                        value=UtiAusdruck.BI_SETOR;
        break;
      case 63:
        jj_consume_token(63);
                        value=UtiAusdruck.BI_SETXOR;
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck1();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck2() throws ParseException {
   UtiAusdruck a, b, c;
    a = Ausdruck3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
      jj_consume_token(64);
      b = Ausdruck3();
      jj_consume_token(65);
      c = Ausdruck3();
      a= new UtiAusdruck(a, b, c, UtiAusdruck.BI_QUESTION);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck3() throws ParseException {
   UtiAusdruck a, c;
    a = Ausdruck4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
      jj_consume_token(66);
      c = Ausdruck3();
      a= new UtiAusdruck(a, c, UtiAusdruck.BI_LOGICOR);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck4() throws ParseException {
   UtiAusdruck a, c;
    a = Ausdruck5();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      c = Ausdruck4();
      a= new UtiAusdruck(a, c, UtiAusdruck.BI_LOGICAND);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck5() throws ParseException {
   UtiAusdruck a, c;
    a = Ausdruck6();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      jj_consume_token(68);
      c = Ausdruck5();
      a= new UtiAusdruck(a, c, UtiAusdruck.BI_OR);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck6() throws ParseException {
   UtiAusdruck a, c;
    a = Ausdruck7();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      jj_consume_token(69);
      c = Ausdruck6();
      a= new UtiAusdruck(a, c, UtiAusdruck.BI_XOR);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck7() throws ParseException {
   UtiAusdruck a, b,c;
    a = Ausdruck8();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 70:
      jj_consume_token(70);
      c = Ausdruck7();
      a= new UtiAusdruck(a, c, UtiAusdruck.BI_AND);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck8() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck9();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
    case 72:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        jj_consume_token(71);
                        value=UtiAusdruck.BI_EQUAL;
        break;
      case 72:
        jj_consume_token(72);
                        value=UtiAusdruck.BI_NOTEQUAL;
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck8();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck9() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck10();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF_TOK:
    case 73:
    case 74:
    case 75:
    case 76:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
                          value=UtiAusdruck.BI_LESS;
        break;
      case 74:
        jj_consume_token(74);
                          value=UtiAusdruck.BI_ELESS;
        break;
      case 75:
        jj_consume_token(75);
                         value=UtiAusdruck.BI_GREATER;
        break;
      case 76:
        jj_consume_token(76);
                          value=UtiAusdruck.BI_EGREATER;
        break;
      case INSTANCEOF_TOK:
        jj_consume_token(INSTANCEOF_TOK);
                                   value=UtiAusdruck.BI_INSTANCEOF;
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck9();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*UtiAusdruck Ausdruck9():
{
   UtiAusdruck a, b,c;
}
{
   b=Ausdruck10() "<" c= Ausdruck9()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_LESS);
   }
   | b=Ausdruck10() "<=" c= Ausdruck9()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_ELESS);
   }
   | b=Ausdruck10() ">" c= Ausdruck9()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_GREATER);
   }
   | b=Ausdruck10() ">=" c= Ausdruck9()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_EGREATER);
   }
   | b=Ausdruck10() "instanceof" c= Ausdruck9()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_INSTANCEOF);
   }
   | a=Ausdruck10()
   {return a;}
}*/
  static final public UtiAusdruck Ausdruck10() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck11();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
    case 78:
    case 79:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        jj_consume_token(77);
                           value=UtiAusdruck.BI_LSHIFT;
        break;
      case 78:
        jj_consume_token(78);
                          value=UtiAusdruck.BI_RSHIFT;
        break;
      case 79:
        jj_consume_token(79);
                           value=UtiAusdruck.BI_SHIFTROUND;
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck10();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*
UtiAusdruck Ausdruck10():
{
   UtiAusdruck a, b,c;
}
{
   b=Ausdruck11() "<<" c= Ausdruck10()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_LSHIFT);
   }
   | b=Ausdruck11() ">>" c= Ausdruck10()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_RSHIFT);
   }
   | b=Ausdruck11() ">>>" c= Ausdruck10()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_SHIFTROUND);
   }
   | a=Ausdruck11()
   {return a;}
}*/
  static final public UtiAusdruck Ausdruck11() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck12();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
    case 81:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        jj_consume_token(80);
                          value=UtiAusdruck.BI_PLUS;
        break;
      case 81:
        jj_consume_token(81);
                         value=UtiAusdruck.BI_MINUS;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck11();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

/*UtiAusdruck Ausdruck11():
{
   UtiAusdruck a, b,c;
}
{
   b=Ausdruck12() "+" c= Ausdruck11()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_PLUS);
   }
   | b=Ausdruck12() "-" c= Ausdruck11()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_MINUS);
   }
   | a=Ausdruck12()
   {return a;}
}*/

/*UtiAusdruck Ausdruck12():
{
   UtiAusdruck a, b,c;
}
{
  b=Ausdruck13() "*" c= Ausdruck12()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_MULTIPLY);
   }
   | b=Ausdruck13() "/" c= Ausdruck12()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_DIVIDE);
   }
   | b=Ausdruck13() "%" c= Ausdruck12()
   {
      a= new UtiAusdruck(b, c, UtiAusdruck.BI_MOD);
   }
   | a=Ausdruck13()
   {return a;}
}*/
  static final public UtiAusdruck Ausdruck12() throws ParseException {
   UtiAusdruck a, c;
   int value;
    a = Ausdruck13();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 82:
    case 83:
    case 84:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 82:
        jj_consume_token(82);
                          value=UtiAusdruck.BI_MULTIPLY;
        break;
      case 83:
        jj_consume_token(83);
                         value=UtiAusdruck.BI_DIVIDE;
        break;
      case 84:
        jj_consume_token(84);
                         value=UtiAusdruck.BI_MOD;
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      c = Ausdruck12();
          a= new UtiAusdruck(a, c, value);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck13() throws ParseException {
   UtiAusdruck a, b,c;
   TypeInfo t;
   int value;
   Link l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 80:
    case 81:
    case 85:
    case 86:
    case 87:
    case 88:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jj_consume_token(85);
           value=UtiAusdruck.BI_BITNOT;
        break;
      case 86:
        jj_consume_token(86);
          value=UtiAusdruck.BI_NOT;
        break;
      case 80:
        jj_consume_token(80);
          value=UtiAusdruck.BI_NONE;
        break;
      case 81:
        jj_consume_token(81);
          value=UtiAusdruck.BI_NEG;
        break;
      case 87:
        jj_consume_token(87);
           value=UtiAusdruck.BI_LEFTINCREMENT;
        break;
      case 88:
        jj_consume_token(88);
           value=UtiAusdruck.BI_LEFTDECREMENT;
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      b = Ausdruck13();
      if (value != UtiAusdruck.BI_NONE) {
      a= new UtiAusdruck(b, value);
      } else {
      a=b;
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      if (jj_2_9(2147483647)) {
        jj_consume_token(LKLAMMER);
        t = TypeDeklaration();
        jj_consume_token(RKLAMMER);
        c = Ausdruck13();
      l = new Link();
      a= new UtiAusdruck(l, c);
      LinkMemory.add(l, t.arraycount, a, t.name, UtiType.class);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_VALUE:
        case FLOAT_VALUE:
        case CHAR_VALUE:
        case STRING_VALUE:
        case TRUE_TOK:
        case FALSE_TOK:
        case NULL_TOK:
        case NEW_TOK:
        case IDENT:
        case LKLAMMER:
        case REKLAMMER:
          a = Ausdruck14();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 87:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 87:
              jj_consume_token(87);
                             value=UtiAusdruck.BI_RIGHTINCREMENT;
              break;
            case 88:
              jj_consume_token(88);
                            value=UtiAusdruck.BI_RIGHTDECREMENT;
              break;
            default:
              jj_la1[54] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
      a= new UtiAusdruck(a,value);
            break;
          default:
            jj_la1[55] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public UtiAusdruck Ausdruck14() throws ParseException {
   UtiAusdruck a=null, b;
   Token t;
   LinkName link;
   Link n;
   Vector v = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LKLAMMER:
      jj_consume_token(LKLAMMER);
      a = Ausdruck();
      jj_consume_token(RKLAMMER);
      break;
    case TRUE_TOK:
      jj_consume_token(TRUE_TOK);
             a = new UtiAusdruck(UtiAusdruck.BI_TRUE);
      break;
    case FALSE_TOK:
      jj_consume_token(FALSE_TOK);
              a = new UtiAusdruck(UtiAusdruck.BI_FALSE);
      break;
    case NULL_TOK:
      jj_consume_token(NULL_TOK);
             a = new UtiAusdruck(UtiAusdruck.BI_NULL);
      break;
    case INTEGER_VALUE:
      t = jj_consume_token(INTEGER_VALUE);
   a = new UtiAusdruck(new Integer(Integer.parseInt(t.toString())));
      break;
    case FLOAT_VALUE:
      t = jj_consume_token(FLOAT_VALUE);
                      a = new UtiAusdruck(new Double(Double.parseDouble(t.toString())));
      break;
    case STRING_VALUE:
      t = jj_consume_token(STRING_VALUE);
                       a= new UtiAusdruck(t.toString());
      break;
    case CHAR_VALUE:
      t = jj_consume_token(CHAR_VALUE);
                     a= new UtiAusdruck(new Character(t.toString().charAt(1)));
      break;
    case IDENT:
      link = singlename();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LKLAMMER:
        jj_consume_token(LKLAMMER);
         v = new Vector();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_VALUE:
        case FLOAT_VALUE:
        case CHAR_VALUE:
        case STRING_VALUE:
        case TRUE_TOK:
        case FALSE_TOK:
        case NULL_TOK:
        case NEW_TOK:
        case IDENT:
        case LKLAMMER:
        case REKLAMMER:
        case 80:
        case 81:
        case 85:
        case 86:
        case 87:
        case 88:
          b = Ausdruck();
                       v.addElement(b);
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[59] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          b = Ausdruck();
                           v.addElement(b);
        }
        jj_consume_token(RKLAMMER);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
        n=new Link();
        if (v == null) {
           a=new UtiAusdruck(UtiAusdruck.BI_VARIABLE);
           a.addData(n);
           LinkMemory.add(n, a, link, UtiVariable.class);
        } else {
           a=new UtiAusdruck(UtiAusdruck.BI_CALL);
           a.addData(n);
           LinkMemory.add(n, a, link, UtiMethod.class);
           for (int i = 0; i < v.size(); i++) {
              a.addData((UtiOB)v.elementAt(i));
           }
        }
      break;
    default:
      jj_la1[64] = jj_gen;
      if (jj_2_10(2147483647)) {
        jj_consume_token(NEW_TOK);
        link = singlename();
        jj_consume_token(LKLAMMER);
         v = new Vector();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_VALUE:
        case FLOAT_VALUE:
        case CHAR_VALUE:
        case STRING_VALUE:
        case TRUE_TOK:
        case FALSE_TOK:
        case NULL_TOK:
        case NEW_TOK:
        case IDENT:
        case LKLAMMER:
        case REKLAMMER:
        case 80:
        case 81:
        case 85:
        case 86:
        case 87:
        case 88:
          b = Ausdruck();
                       v.addElement(b);
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[62] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          b = Ausdruck();
                           v.addElement(b);
        }
        jj_consume_token(RKLAMMER);
        n=new Link();
        a=new UtiAusdruck(UtiAusdruck.BI_CONSTRUCTOR);
        a.addData(n);
        LinkMemory.add(n, a, link, UtiType.class);
        for (int i = 0; i < v.size(); i++) {
              a.addData((UtiOB)v.elementAt(i));
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW_TOK:
          jj_consume_token(NEW_TOK);
          link = singlename();
        v = new Vector();
          label_17:
          while (true) {
            jj_consume_token(REKLAMMER);
            b = Ausdruck();
            jj_consume_token(LEKLAMMER);
                              v.addElement(b);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case REKLAMMER:
              ;
              break;
            default:
              jj_la1[63] = jj_gen;
              break label_17;
            }
          }
        n=new Link();
        a=new UtiAusdruck(UtiAusdruck.BI_CONSTRUCTORARRAY);
        a.addData(n);
        LinkMemory.add(n, a, link, UtiType.class);
        for (int i = 0; i < v.size(); i++) {
              a.addData((UtiOB)v.elementAt(i));
        }
          break;
        case REKLAMMER:
          jj_consume_token(REKLAMMER);
          a = Ausdruck();
          jj_consume_token(LEKLAMMER);
                         a = new UtiAusdruck(a, UtiAusdruck.BI_ARRAY);
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_3R_99() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_3R_45()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_3R_44()) return true;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_scan_token(INSTANCEOF_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_3R_43()) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_3R_42()) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    if (jj_3R_41()) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(CHAR_VALUE)) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(STRING_VALUE)) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_3R_39()) return true;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(FLOAT_VALUE)) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    if (jj_3R_38()) return true;
    return false;
  }

  static final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(INTEGER_VALUE)) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(NULL_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(FALSE_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(TRUE_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(LKLAMMER)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    if (jj_3R_105()) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_3R_100()) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(LKLAMMER)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RKLAMMER)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(LGKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(DO_TOK)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  static final private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_3R_103()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_scan_token(WHILE_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(FOR_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_scan_token(ELSE_TOK)) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(IF_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    if (jj_3R_113()) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_scan_token(RETURN_TOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(CONTINUE_TOK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_23() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(BREAK_TOK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(NEW_TOK)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    if (jj_3R_94()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(REKLAMMER)) return true;
    if (jj_scan_token(LEKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(NEW_TOK)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(LKLAMMER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(NEW_TOK)) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RKLAMMER)) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_scan_token(EXTERN_TOK)) return true;
    if (jj_scan_token(LKLAMMER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public ModelGeneratorTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[66];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x10000,0xce0000,0xce0000,0x0,0x80000,0xc00000,0xc00000,0x380000,0x380000,0x2000000,0x0,0x1000000,0x8b80000,0x800000,0x8b80000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0xd0006c00,0x0,0x0,0xd0006c00,0xd0006c00,0x6c00,0x0,0x6c00,0x0,0x0,0x6c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6c00,0x6c00,0x0,0x0,0x6c00,0x0,0x0,0x6c00,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x20000,0x20000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x420,0x400,0x420,0x10000,0x40000,0x10000,0x400,0x40000,0x40000,0x0,0x30ffd,0x400,0x400,0x32ffd,0x30ffd,0x10e1c,0x400,0x10e1c,0x40000,0x400,0x10e1c,0x40000,0x40000,0xfff00000,0xfff00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10e1c,0x10e1c,0x40000,0x800,0x10e1c,0x40000,0x10000,0xc1c,0x10200,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e30000,0x0,0x0,0x1e30000,0x1e30000,0x1e30000,0x0,0x1e30000,0x0,0x0,0x1e30000,0x0,0x0,0x0,0x0,0x1,0x4,0x8,0x10,0x20,0x40,0x180,0x180,0x1e00,0x1e00,0xe000,0xe000,0x30000,0x30000,0x1c0000,0x1c0000,0x1e30000,0x1800000,0x1800000,0x1e30000,0x0,0x1e30000,0x0,0x0,0x1e30000,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public ModelGenerator(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ModelGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ModelGenerator(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ModelGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ModelGenerator(ModelGeneratorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ModelGeneratorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 66; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[89];
    for (int i = 0; i < 89; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 66; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 89; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
